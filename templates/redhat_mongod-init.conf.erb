#!/bin/bash
# !!! generated by puppet !!!

# mongod - Startup script for mongod

# chkconfig: 35 85 15
# description: Mongo is a scalable, document-oriented database.
# processname: mongod
# config: /etc/mongod_<%= @mongod_instance %>.conf
# pidfile: <%= scope.lookupvar('mongodb::pidfilepath') %>/mongod_<%= @mongod_instance %>/mongod.pid

. /etc/rc.d/init.d/functions

# things from mongod.conf get there by mongod reading it


# NOTE: if you change any OPTIONS here, you get what you pay for:
# this script assumes all options are in the config file.
CONFIGFILE="/etc/mongod_<%= @mongod_instance %>.conf"
OPTIONS=" -f $CONFIGFILE"

# FIXME: 1.9.x has a --shutdown flag that parses the config file and
# shuts down the correct running pid, but that's unavailable in 1.8
# for now.  This can go away when this script stops supporting 1.8.
DBPATH=`awk -F= '/^dbpath=/{print $2}' "$CONFIGFILE"`
PIDFILE=`awk -F= '/^pidfilepath=/{print $2}' "$CONFIGFILE"`
PIDPATH=`dirname $PIDFILE`
mongod=${MONGOD-/usr/bin/mongod}

MONGO_USER=<%= scope.lookupvar('mongodb::run_as_user') %>
MONGO_GROUP=<%= scope.lookupvar('mongodb::run_as_group') %>

# Handle NUMA access to CPUs (SERVER-3574)
# This verifies the existence of numactl as well as testing that the command works
NUMACTL_ARGS="--interleave=all"
if which numactl >/dev/null 2>/dev/null && numactl $NUMACTL_ARGS ls / >/dev/null 2>/dev/null
then
    NUMACTL="numactl $NUMACTL_ARGS"
else
    NUMACTL=""
fi

start()
{
  echo -n $"Starting mongod_<%= @mongod_instance %>: "
  mkdir -p $DBPATH || exit 5
  chown -R ${MONGO_USER}:${MONGO_GROUP} $DBPATH
  if [ "$DBPATH" != "$PIDPATH" ]
  then
    mkdir -p $PIDPATH || exit 5
    chown -R ${MONGO_USER}:${MONGO_GROUP} $PIDPATH
  fi
  daemon --user $MONGO_USER $NUMACTL $mongod $OPTIONS
  RETVAL=$?
  echo
  [ $RETVAL -eq 0 ] && touch /var/lock/subsys/mongod_<%= @mongod_instance %>
}

stop()
{
  echo -n $"Stopping mongod_<%= @mongod_instance %>: "
  killproc -p "$PIDFILE" -d 300 $mongod
  RETVAL=$?
  [ -f "$PIDFILE" ] && rm "$PIDFILE"
  echo
  [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/mongod_<%= @mongod_instance %>
}

restart () {
        stop
        start
}

ulimit -n <%= scope.lookupvar('mongodb::ulimit_nofiles') %>
ulimit -u <%= scope.lookupvar('mongodb::ulimit_nproc') %>

RETVAL=0

case "$1" in
  start)
    status -p $PIDFILE >/dev/null
    RET=$?
    if [ $RET -ne 0 ];then
      start
    fi
    ;;
  stop)
    stop
    ;;
  restart|reload|force-reload)
    restart
    ;;
  condrestart)
    [ -f /var/lock/subsys/mongod_<%= @mongod_instance %> ] && restart || :
    ;;
  status)
    status -p $PIDFILE
    RETVAL=$?
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
    RETVAL=1
esac

exit $RETVAL
